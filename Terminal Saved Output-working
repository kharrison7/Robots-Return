Last login: Mon Aug 28 09:41:36 on ttys000
MacBook-Pro:~ lacro_000$ ls
Applications	Downloads	Music		Sites
Desktop		Library		OneDrive	Tracing
Documents	Movies		Pictures	newfile.txt
MacBook-Pro:~ lacro_000$ cd Documents/
MacBook-Pro:Documents lacro_000$ ls
DBQuery.shellBatchSize	Projects		students.json
My Games		_Projects-Back-End
Overwatch		primer-dataset.json
MacBook-Pro:Documents lacro_000$ _Projects-Back-End/
-bash: _Projects-Back-End/: is a directory
MacBook-Pro:Documents lacro_000$ cd _Projects-Back-End/
MacBook-Pro:_Projects-Back-End lacro_000$ ls
Mystery-Word	Other FIles	Week 6
NPM Template	Week 5 Node	_Week-7
MacBook-Pro:_Projects-Back-End lacro_000$ cd _Week-7/
MacBook-Pro:_Week-7 lacro_000$ ls
NPM Template	RobotsReturn
MacBook-Pro:_Week-7 lacro_000$ cd RobotsReturn/
MacBook-Pro:RobotsReturn lacro_000$ ls
README.md		node_modules		public
app.js			package-lock.json	robots.json
fill.json		package.json		views
fill2.json		primer-dataset.json
MacBook-Pro:RobotsReturn lacro_000$ npm start

> mystery-word@1.0.0 start /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn
> node app.js

Started express application!
^CMacBook-Pro:RobotsReturn lacro_000$
MacBook-Pro:RobotsReturn lacro_000$ curl -o primer-dataset.json https://raw.githubusercontent.com/mongodb/docs-assets/primer-dataset/primer-dataset.json
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100 11.3M  100 11.3M    0     0  6018k      0  0:00:01  0:00:01 --:--:-- 6017k
MacBook-Pro:RobotsReturn lacro_000$
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --db newdb --collection restaurants --file primer-dataset.json
2017-08-28T21:05:04.267-0400	connected to: localhost
2017-08-28T21:05:04.769-0400	imported 25359 documents
MacBook-Pro:RobotsReturn lacro_000$ mondo newdb
-bash: mondo: command not found
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --db test --collection restaurants --drop --file ~/downloads/primer-dataset.json
2017-08-28T21:06:30.257-0400	Failed: open /Users/lacro_000/downloads/primer-dataset.json: no such file or directory
2017-08-28T21:06:30.258-0400	imported 0 documents
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --db test --collection restaurants --drop --file ~/downloads/primer-dataset.json
2017-08-28T21:06:34.550-0400	Failed: open /Users/lacro_000/downloads/primer-dataset.json: no such file or directory
2017-08-28T21:06:34.551-0400	imported 0 documents
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --dbtest --collection robots --drop --file
2017-08-28T21:07:22.302-0400	error parsing command line options: unknown option "dbtest"
2017-08-28T21:07:22.302-0400	try 'mongoimport --help' for more information
MacBook-Pro:RobotsReturn lacro_000$
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --help
Usage:
  mongoimport <options> <file>

Import CSV, TSV or JSON data into MongoDB. If no file is provided, mongoimport reads from stdin.

See http://docs.mongodb.org/manual/reference/program/mongoimport/ for more information.

general options:
      --help                                      print usage
      --version                                   print the tool version and
                                                  exit

verbosity options:
  -v, --verbose=<level>                           more detailed log output
                                                  (include multiple times for
                                                  more verbosity, e.g. -vvvvv,
                                                  or specify a numeric value,
                                                  e.g. --verbose=N)
      --quiet                                     hide all log output

connection options:
  -h, --host=<hostname>                           mongodb host to connect to
                                                  (setname/host1,host2 for
                                                  replica sets)
      --port=<port>                               server port (can also use
                                                  --host hostname:port)

ssl options:
      --ssl                                       connect to a mongod or mongos
                                                  that has ssl enabled
      --sslCAFile=<filename>                      the .pem file containing the
                                                  root certificate chain from
                                                  the certificate authority
      --sslPEMKeyFile=<filename>                  the .pem file containing the
                                                  certificate and key
      --sslPEMKeyPassword=<password>              the password to decrypt the
                                                  sslPEMKeyFile, if necessary
      --sslCRLFile=<filename>                     the .pem file containing the
                                                  certificate revocation list
      --sslAllowInvalidCertificates               bypass the validation for
                                                  server certificates
      --sslAllowInvalidHostnames                  bypass the validation for
                                                  server name
      --sslFIPSMode                               use FIPS mode of the
                                                  installed openssl library

authentication options:
  -u, --username=<username>                       username for authentication
  -p, --password=<password>                       password for authentication
      --authenticationDatabase=<database-name>    database that holds the
                                                  user's credentials
      --authenticationMechanism=<mechanism>       authentication mechanism to
                                                  use

namespace options:
  -d, --db=<database-name>                        database to use
  -c, --collection=<collection-name>              collection to use

uri options:
      --uri=mongodb-uri                           mongodb uri connection string

input options:
  -f, --fields=<field>[,<field>]*                 comma separated list of
                                                  fields, e.g. -f name,age
      --fieldFile=<filename>                      file with field names - 1 per
                                                  line
      --file=<filename>                           file to import from; if not
                                                  specified, stdin is used
      --headerline                                use first line in input
                                                  source as the field list (CSV
                                                  and TSV only)
      --jsonArray                                 treat input source as a JSON
                                                  array
      --parseGrace=<grace>                        controls behavior when type
                                                  coercion fails - one of:
                                                  autoCast, skipField, skipRow,
                                                  stop (defaults to 'stop')
                                                  (default: stop)
      --type=<type>                               input format to import: json,
                                                  csv, or tsv (defaults to
                                                  'json') (default: json)
      --columnsHaveTypes                          indicated that the field list
                                                  (from --fields, --fieldsFile,
                                                  or --headerline) specifies
                                                  types; They must be in the
                                                  form of
                                                  '<colName>.<type>(<arg>)'.
                                                  The type can be one of: auto,
                                                  binary, bool, date, date_go,
                                                  date_ms, date_oracle, double,
                                                  int32, int64, string. For
                                                  each of the date types, the
                                                  argument is a datetime layout
                                                  string. For the binary type,
                                                  the argument can be one of:
                                                  base32, base64, hex. All
                                                  other types take an empty
                                                  argument. Only valid for CSV
                                                  and TSV imports. e.g.
                                                  zipcode.string(),
                                                  thumbnail.binary(base64)

ingest options:
      --drop                                      drop collection before
                                                  inserting documents
      --ignoreBlanks                              ignore fields with empty
                                                  values in CSV and TSV
      --maintainInsertionOrder                    insert documents in the order
                                                  of their appearance in the
                                                  input source
  -j, --numInsertionWorkers=<number>              number of insert operations
                                                  to run concurrently (defaults
                                                  to 1) (default: 1)
      --stopOnError                               stop importing at first
                                                  insert/upsert error
      --mode=[insert|upsert|merge]                insert: insert only. upsert:
                                                  insert or replace existing
                                                  documents. merge: insert or
                                                  modify existing documents.
                                                  defaults to insert
      --upsertFields=<field>[,<field>]*           comma-separated fields for
                                                  the query part when --mode is
                                                  set to upsert or merge
      --writeConcern=<write-concern-specifier>    write concern options e.g.
                                                  --writeConcern majority,
                                                  --writeConcern '{w: 3,
                                                  wtimeout: 500, fsync: true,
                                                  j: true}'
      --bypassDocumentValidation                  bypass document validation
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --db test --collection robots --drop --file
2017-08-28T21:08:15.443-0400	error parsing command line options: expected argument for flag `--file'
2017-08-28T21:08:15.443-0400	try 'mongoimport --help' for more information
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --db test --collection robots --drop --file /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/fill.json
2017-08-28T21:09:32.468-0400	connected to: localhost
2017-08-28T21:09:32.469-0400	dropping: test.robots
2017-08-28T21:09:32.470-0400	Failed: error unmarshaling bytes on document #0: JSON decoder out of sync - data changing underfoot?
2017-08-28T21:09:32.470-0400	imported 0 documents
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --db test --collection robots --drop --file ~/Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/fill.json
2017-08-28T21:09:58.745-0400	Failed: open /Users/lacro_000/Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/fill.json: no such file or directory
2017-08-28T21:09:58.745-0400	imported 0 documents
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --db test --collection robots --drop --file ~/Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/fill.json --jsonArray
2017-08-28T21:10:50.409-0400	Failed: open /Users/lacro_000/Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/fill.json: no such file or directory
2017-08-28T21:10:50.410-0400	imported 0 documents
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --db test --collection robots --drop --file ~/Documents/_Projects-Back-End/_Week-7/RobotsReturn/fill.json --jsonArray
2017-08-28T21:11:40.418-0400	connected to: localhost
2017-08-28T21:11:40.419-0400	dropping: test.robots
2017-08-28T21:11:40.462-0400	imported 50 documents
MacBook-Pro:RobotsReturn lacro_000$ npm start

> mystery-word@1.0.0 start /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn
> node app.js

Started express application!
^CMacBook-Pro:RobotsReturn lacro_000$
MacBook-Pro:RobotsReturn lacro_000$ mongoimport --db test --collection robots --drop --file ~/Documents/_Projects-Back-End/_Week-7/RobotsReturn/fill.json --jsonArray
2017-08-28T21:12:13.551-0400	connected to: localhost
2017-08-28T21:12:13.551-0400	dropping: test.robots
2017-08-28T21:12:13.581-0400	imported 50 documents
MacBook-Pro:RobotsReturn lacro_000$ mongo robots
MongoDB shell version v3.4.7
connecting to: mongodb://127.0.0.1:27017/robots
MongoDB server version: 3.4.7
Server has startup warnings:
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten]
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten]
> db.robots.findOne()
null
> db.test.findOne()
null
> db.robotsfindOne({job: "Engineer IV")
...
...
>
> db.test.findOne({job: "Engineer IV"})
null
> dr.robots.findOne({job: "Engineer IV"})
2017-08-29T08:12:41.481-0400 E QUERY    [thread1] ReferenceError: dr is not defined :
@(shell):1:1
> db.robots.findOne({job: "Engineer IV"})
null
> db.test.findOne({job: "Engineer IV"})
null
> db.robots.findOne({username: "hjuza0"})
null
> db.robots.find({username: "hjuza0"})
>
>
> db.robots.find({username: "hjuza0"})
> ^C
bye
MacBook-Pro:RobotsReturn lacro_000$ npm start

> mystery-word@1.0.0 start /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn
> node app.js

Started express application!
^CMacBook-Pro:RobotsReturn lacro_000$
MacBook-Pro:RobotsReturn lacro_000$ npm install mongodb --save
npm WARN express-validation@1.0.2 requires a peer of joi@* but none was installed.
npm WARN mystery-word@1.0.0 No description
npm WARN mystery-word@1.0.0 No repository field.

+ mongodb@2.2.31
updated 1 package in 2.701s
MacBook-Pro:RobotsReturn lacro_000$ npm start

> mystery-word@1.0.0 start /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn
> node app.js

/Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/app.js:68
MongoClient.connect(url, function(err, db) {
                    ^

ReferenceError: url is not defined
    at Object.<anonymous> (/Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/app.js:68:21)
    at Module._compile (module.js:573:30)
    at Object.Module._extensions..js (module.js:584:10)
    at Module.load (module.js:507:32)
    at tryModuleLoad (module.js:470:12)
    at Function.Module._load (module.js:462:3)
    at Function.Module.runMain (module.js:609:10)
    at startup (bootstrap_node.js:158:16)
    at bootstrap_node.js:578:3
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! mystery-word@1.0.0 start: `node app.js`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the mystery-word@1.0.0 start script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/lacro_000/.npm/_logs/2017-08-29T12_20_58_677Z-debug.log
MacBook-Pro:RobotsReturn lacro_000$
MacBook-Pro:RobotsReturn lacro_000$ npm start

> mystery-word@1.0.0 start /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn
> node app.js

Started express application!
/Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/node_modules/mongodb/lib/mongo_client.js:433
          throw err
          ^

ReferenceError: assert is not defined
    at /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/app.js:69:3
    at connectCallback (/Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/node_modules/mongodb/lib/mongo_client.js:515:5)
    at /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn/node_modules/mongodb/lib/mongo_client.js:430:11
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! mystery-word@1.0.0 start: `node app.js`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the mystery-word@1.0.0 start script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/lacro_000/.npm/_logs/2017-08-29T12_21_39_038Z-debug.log
MacBook-Pro:RobotsReturn lacro_000$
MacBook-Pro:RobotsReturn lacro_000$
MacBook-Pro:RobotsReturn lacro_000$ npm start

> mystery-word@1.0.0 start /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn
> node app.js

Started express application!
Connected successfully to server
^C
MacBook-Pro:RobotsReturn lacro_000$
MacBook-Pro:RobotsReturn lacro_000$ npm start

> mystery-word@1.0.0 start /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn
> node app.js

Started express application!
Connected successfully to mongodb server
^CMacBook-Pro:RobotsReturn lacro_000$






MacBook-Pro:RobotsReturn lacro_000$ mongo newdb
MongoDB shell version v3.4.7
connecting to: mongodb://127.0.0.1:27017/newdb
MongoDB server version: 3.4.7
Server has startup warnings:
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten]
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten]
> show collections
restaurants
> show dbs
admin  0.000GB
local  0.000GB
newdb  0.018GB
test   0.000GB
> ^C
bye



MacBook-Pro:RobotsReturn lacro_000$ mongoimport --db newdb --collection robots --jsonArray < fill.json
2017-08-29T09:14:38.632-0400	connected to: localhost
2017-08-29T09:14:38.679-0400	imported 50 documents
MacBook-Pro:RobotsReturn lacro_000$ mongo newdb
MongoDB shell version v3.4.7
connecting to: mongodb://127.0.0.1:27017/newdb
MongoDB server version: 3.4.7
Server has startup warnings:
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten]
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2017-08-28T09:49:47.770-0400 I CONTROL  [initandlisten]




> show collections
restaurants
robots


> db.robots.findOne()
{
	"_id" : ObjectId("59a568be774b68c43892f06b"),
	"id" : 8,
	"username" : "rgueny7",
	"name" : "Rochell Gueny",
	"avatar" : "https://robohash.org/liberoeaquevero.png?size=150x150&set=set1",
	"email" : "rgueny7@tinyurl.com",
	"university" : "Erasmushogeschool Brussel",
	"job" : "Sales Associate",
	"company" : "Stamm LLC",
	"skills" : [
		"Erwin",
		"Organizational Development",
		"Work Effectively"
	],
	"phone" : "32-(250)163-4538",
	"address" : {
		"street_num" : "73",
		"street_name" : "Rockefeller",
		"city" : "Ninove",
		"state_or_province" : "VLG",
		"postal_code" : "9404",
		"country" : "Belgium"
	}
}
> ^C
bye
MacBook-Pro:RobotsReturn lacro_000$ npm start

> mystery-word@1.0.0 start /Users/lacro_000/Documents/_Projects-Back-End/_Week-7/RobotsReturn
> node app.js

Started express application!
Connected successfully to mongodb server
^CMacBook-Pro:RobotsReturn lacro_000$
MacBook-Pro:RobotsReturn lacro_000$
